This is SFJIT, a stackful modification of the stackless JIT (sljit). For
backwards compatibility, it is still named sljit. There are a few major changes:

(1) SLJIT_SP is renamed to SLJIT_FRAMEP, and is (as suggested) now the frame
    pointer. Otherwise its behavior is the same. That is, locals allocated
    during emit_enter are accessed through SLJIT_FRAMEP.

(2) SLJIT_STACKP is introduced, and is the actual stack pointer. New space can
    be allocated by sljit_emit_alloca and optionally deallocated with
    sljit_emit_pop. Deallocation is optional. Space allocated with
    sljit_emit_alloca can be modified post hoc using sljit_set_alloca, so you
    can generate code without being certain of how much space is needed, then
    adapt on the fly.

(3) A system is introduced for functions with more than four arguments. See
    testa2 in sljitTest.c for details. Multi-argument functions *must* use
    sljit_enter_multiarg and *must* start by getting all their arguments with
    sljit_emit_get_marg. To call a multi-argument function, use sljit_marg_arg
    to construct a struct sljit_marg, sljit_marg_properties to determine where
    everything has to go, sljit_emit_alloca to get stack space, standard MOVs to
    move things into registers, and sljit_emit_marg_mov for arguments, then use
    sljit_emit_marg_call or sljit_emit_marg_icall. All multi-argument functions
    use standard C calling convention.

---

                     SLJIT - Stack Less JIT Compiler

Purpose:
  A simple, machine independent JIT compiler, which suitable for
  translating interpreted byte code to machine code. The sljitLir.h
  describes the LIR (low-level intermediate representation) of SLJIT.

Compatible:
  Any C (C++) compiler. At least I hope so.

Using sljit:
  Copy the content of sljit_src directory into your project source directory.
  Add sljitLir.c source file to your build environment. All other files are
  included by sljitLir.c (if required). Define the machine by SLJIT_CONFIG_*
  selector. See sljitConfigCPU.h for all possible values. For C++ compilers,
  rename sljitLir.c to sljitLir.cpp.

More info:
  https://zherczeg.github.io/sljit/

Contact:
  hzmester@freemail.hu

Special thanks:
  Alexander Nasonov
  Carlo Marcelo Arenas Belón
  Christian Persch
  Daniel Richard G.
  Giuseppe D'Angelo
  H.J. Lu
  James Cowgill
  Jason Hood
  Jiong Wang (TileGX support)
  Marc Mutz
  Martin Storsjö
  Michael McConville
  Mingtao Zhou (LoongArch support)
  Walter Lee
  Wen Xichang
  YunQiang Su
