This is SFJIT, a stackful modification of the stackless JIT (sljit). For
backwards compatibility, it is still named sljit. There are a few major changes:

(1) SLJIT_SP is renamed to SLJIT_FRAMEP, and is (as suggested) now the frame
    pointer. Otherwise its behavior is the same. That is, locals allocated
    during emit_enter are accessed through SLJIT_FRAMEP.

(2) SLJIT_STACKP is introduced, and is the actual stack pointer. New space can
    be allocated by sljit_emit_alloca and optionally deallocated with
    sljit_emit_pop.

Space allocated with sljit_emit_alloca can be modified post hoc using
sljit_set_alloca, so you can generate code without being certain of how much
space is needed, then adapt on the fly.

---

                     SLJIT - Stack Less JIT Compiler

Purpose:
  A simple, machine independent JIT compiler, which suitable for
  translating interpreted byte code to machine code. The sljitLir.h
  describes the LIR (low-level intermediate representation) of SLJIT.

Compatible:
  Any C (C++) compiler. At least I hope so.

Using sljit:
  Copy the content of sljit_src directory into your project source directory.
  Add sljitLir.c source file to your build environment. All other files are
  included by sljitLir.c (if required). Define the machine by SLJIT_CONFIG_*
  selector. See sljitConfig.h for all possible values. For C++ compilers,
  rename sljitLir.c to sljitLir.cpp.

More info:
  https://zherczeg.github.io/sljit/

Contact:
  hzmester@freemail.hu

Special thanks:
  Alexander Nasonov
  Carlo Marcelo Arenas Belón
  Christian Persch
  Daniel Richard G.
  Giuseppe D'Angelo
  H.J. Lu
  James Cowgill
  Jason Hood
  Jiong Wang (TileGX support)
  Marc Mutz
  Martin Storsjö
  Michael McConville
  Walter Lee
  Wen Xichang
  YunQiang Su
